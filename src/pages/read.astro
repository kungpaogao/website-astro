---
import { getBlock, queryNotionDatabase } from "src/lib/notion-cms";
import Layout from "../layouts/Layout.astro";
import { parsePageUrl } from "../lib/notion-cms-page";
import { getPageProperties } from "../lib/notion-cms-page";
import { marked } from "marked";
import { parseBlocks, parseProperty } from "src/lib/notion-parse";
import { format, parseISO } from "date-fns";

const databaseId = parsePageUrl(
  "https://www.notion.so/kungpaogao/0078e2525cd04d6584cb8baf87fc1945"
);
const pageId = parsePageUrl(
  "https://www.notion.so/kungpaogao/Reading-ccd59d90822d402b8cc69d482bbd55c5"
);

const dbPages = await queryNotionDatabase({
  database_id: databaseId,
});
const pageProperties = await getPageProperties(pageId);
const pageContent = marked.parse(parseBlocks(await getBlock(pageId)));
---

<Layout {...pageProperties} className="prose mx-auto">
  <Fragment set:html={pageContent} />
  <div class="mt-3 flex flex-col items-start gap-3">
    {
      dbPages.map((page) => (
        <div>
          {page.properties["Tags"]["multi_select"].find(
            (tag) => tag.name === "wow"
          ) && <span class="text-red-500">wow</span>}
          <a class="underline" href={parseProperty(page.properties["Link"])}>
            {parseProperty(page.properties["Comments and Quotes"])}
          </a>{" "}
          on {format(parseISO(parseProperty(page.properties["Date"])), "MMM d")}
          {page.properties["Tags"]["multi_select"]
            .filter((tag) => tag.name !== "wow")
            .map((tag) => (
              <span class="text-gray-400">#{tag.name} </span>
            ))}
        </div>
      ))
    }
  </div>
</Layout>
